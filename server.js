// Generated by CoffeeScript 1.12.7
(function() {
  var app, express, parseColors, parseRanges, std_map;

  express = require('express');

  app = express();

  std_map = require('./std_map.js');

  app.use(express["static"]('files'));

  app.get('/', function(req, res) {
    var K, Size, Step, answ, colors, intervals;
    K = req.query.K;
    Step = req.query.Step;
    Size = req.query.Size;
    colors = [req.query.Color1, req.query.Color2, req.query.Color3, req.query.Color4, req.query.Color5, req.query.Color6, req.query.Color7, req.query.Color8];
    intervals = [parseInt(req.query.Range1), parseInt(req.query.Range2), parseInt(req.query.Range3), parseInt(req.query.Range4), parseInt(req.query.Range5), parseInt(req.query.Range6)];
    if (K === void 0 || Size === void 0 || Step === void 0 || !(parseRanges(intervals))) {
      return res.sendFile(__dirname + '/index.html');
    } else {
      answ = std_map(parseFloat(K), parseFloat(Step), parseInt(Size), parseColors(colors), intervals);
      if (answ !== "error") {
        console.log(answ);
        return res.sendFile(__dirname + '/result.html');
      } else {
        return res.sendFile(__dirname + '/index.html');
      }
    }
  });

  app.listen(3000, function() {
    return console.log('Example app listening on port 3000!');
  });

  parseColors = function(colors) {
    var color, j, len, ret;
    ret = [];
    for (j = 0, len = colors.length; j < len; j++) {
      color = colors[j];
      ret.push(parseInt("0x" + color + "FF"));
    }
    return ret;
  };

  parseRanges = function(ranges) {
    var i, j, range, ref;
    for (i = j = 0, ref = ranges.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      range = ranges[i];
      if (!(range > 0)) {
        console.log(range + " #" + i + " is not valid");
        return false;
      }
    }
    return true;
  };

}).call(this);
